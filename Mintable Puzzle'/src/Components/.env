import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { galleryImages } from './imageData';
import { useDrag } from 'react-dnd';

const PUZZLE_SIZE = 3;

function PuzzleSolver() {
    const navigate = useNavigate();

    const { id } = useParams();

    const [puzzlePieces, setPuzzlePieces] = useState([]);
    const [emptyIndex, setEmptyIndex] = useState(PUZZLE_SIZE * PUZZLE_SIZE - 1); // Index of the empty block
    const [isSolved, setIsSolved] = useState(false);

    const selectedImage = galleryImages.find((image) => image.id === parseInt(id));
    const selectedImageUrl = selectedImage ? selectedImage.imageUrl : '';

    useEffect(() => {
        const image = new Image();
        image.src = selectedImageUrl;
        image.onload = () => {
            const pieceWidth = image.width / PUZZLE_SIZE;
            const pieceHeight = image.height / PUZZLE_SIZE;

            const puzzlePiecesData = [];

            for (let row = 0; row < PUZZLE_SIZE; row++) {
                for (let col = 0; col < PUZZLE_SIZE; col++) {
                    if (row === PUZZLE_SIZE - 1 && col === PUZZLE_SIZE - 1) {
                        // Last piece is the empty block
                        puzzlePiecesData.push(null);
                        continue;
                    }

                    const canvas = document.createElement('canvas');
                    canvas.width = pieceWidth;
                    canvas.height = pieceHeight;
                    const context = canvas.getContext('2d');
                    context.drawImage(
                        image,
                        col * pieceWidth,
                        row * pieceHeight,
                        pieceWidth,
                        pieceHeight,
                        0,
                        0,
                        pieceWidth,
                        pieceHeight
                    );
                    const pieceImageUrl = canvas.toDataURL(); // Convert canvas to data URL
                    puzzlePiecesData.push({ x: col * pieceWidth, y: row * pieceHeight, imageUrl: pieceImageUrl });
                }
            }

            setPuzzlePieces(puzzlePiecesData);
        };
    }, [id, selectedImageUrl]);

    const handlePieceClick = useCallback(
        (clickedIndex) => {
            if (isAdjacent(clickedIndex, emptyIndex)) {
                const newPuzzlePieces = [...puzzlePieces];
                [newPuzzlePieces[clickedIndex], newPuzzlePieces[emptyIndex]] = [
                    newPuzzlePieces[emptyIndex],
                    newPuzzlePieces[clickedIndex],
                ];
                setPuzzlePieces(newPuzzlePieces);
                setEmptyIndex(clickedIndex);

                if (isPuzzleSolved(newPuzzlePieces)) {
                    setIsSolved(true);
                }
            }
        },
        [puzzlePieces, emptyIndex]
    );

    const DraggablePiece = ({ index, piece }) => {
        const [, ref] = useDrag({
            type: 'PIECE',
            item: { index },
        });

        const backgroundPosition = piece ? `-${piece.x}px -${piece.y}px` : '0 0';

        return (
            <div
                ref={ref}
                className={`puzzle-piece w-1/3 h-1/3 border border-gray-300 cursor-pointer ${isSolved ? 'opacity-50' : ''}`}
                onClick={() => handlePieceClick(index)}
                style={{
                    backgroundPosition,
                    backgroundImage: piece ? `url(${piece.imageUrl})` : 'none',
                    backgroundSize: `${PUZZLE_SIZE * 100}% ${PUZZLE_SIZE * 100}%`,
                }}
            />
        );
    };

    function isAdjacent(index1, index2) {
        const diff = Math.abs(index1 - index2);
        return (diff === 1 && Math.floor(index1 / PUZZLE_SIZE) === Math.floor(index2 / PUZZLE_SIZE)) || (diff === PUZZLE_SIZE);
    }

    function isPuzzleSolved(pieces) {
        const correctArrangement = Array.from({ length: PUZZLE_SIZE * PUZZLE_SIZE - 1 }, (_, index) => index);
        return pieces.every((piece, index) => (piece ? index === correctArrangement[index] : true));
    }

    function solvePuzzle() {
        if (isSolved) {
            navigate('/');
        } else {
            alert('Please solve the puzzle first.');
        }
    }

    return (
        <div className="p-8">
            <h1 className="text-2xl font-semibold mb-4">Puzzle Solver</h1>
            <div className="flex flex-wrap puzzle-container" style={{ width: '900px', height: '900px', border: '1px solid #ccc' }}>
                {puzzlePieces.map((piece, index) => (
                    <DraggablePiece key={index} index={index} piece={piece} />
                ))}
            </div>
            <button
                className={`mt-4 px-4 py-2 bg-blue-500 text-white rounded ${isSolved ? 'cursor-pointer' : 'cursor-not-allowed opacity-50'}`}
                onClick={solvePuzzle}
                disabled={!isSolved}
            >
                {isSolved ? 'Go Back to Gallery' : 'Solve Puzzle'}
            </button>
        </div>
    );
}

export default PuzzleSolver;
